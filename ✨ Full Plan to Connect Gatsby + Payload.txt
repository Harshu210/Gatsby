‚ú® Full Plan to Connect Gatsby + Payload CMS (using Apollo Client)
1. Install Apollo Client inside Gatsby
Go into your Gatsby project folder, and run:

bash
Copy
Edit
npm install @apollo/client graphql
‚úÖ This installs Apollo Client and GraphQL.

2. Create Apollo Client configuration
In your Gatsby project, create a new file:
src/apollo/client.js

Paste this code:

javascript
Copy
Edit
// src/apollo/client.js
import { ApolloClient, InMemoryCache } from '@apollo/client'

const client = new ApolloClient({
  uri: 'http://localhost:3000/api/graphql', // ‚úÖ your Payload GraphQL API URL
  cache: new InMemoryCache(),
})

export default client
‚úÖ Now your Gatsby project knows how to talk to your Payload CMS.

3. Use ApolloProvider to wrap your page
In your Gatsby page (example: src/pages/index.js), wrap everything inside <ApolloProvider>.

Example:

javascript
Copy
Edit
import React from 'react'
import { ApolloProvider } from '@apollo/client'
import client from '../apollo/client'
import Pages from '../components/Pages'

export default function HomePage() {
  return (
    <ApolloProvider client={client}>
      <Pages />
    </ApolloProvider>
  )
}
‚úÖ Now your Gatsby page can send GraphQL queries.

4. Create a Pages component to fetch data
Make a new file:
src/components/Pages.js

Paste this:

javascript
Copy
Edit
import React from 'react'
import { gql, useQuery } from '@apollo/client'

const GET_PAGES = gql`
  query {
    Pages {
      docs {
        id
        title
        slug
      }
    }
  }
`

export default function Pages() {
  const { loading, error, data } = useQuery(GET_PAGES)

  if (loading) return <p>Loading...</p>
  if (error) return <p>Error: {error.message}</p>

  return (
    <div>
      <h1>Pages from Payload CMS</h1>
      <ul>
        {data.Pages.docs.map((page) => (
          <li key={page.id}>
            <strong>{page.title}</strong> ‚Äî <em>{page.slug}</em>
          </li>
        ))}
      </ul>
    </div>
  )
}
‚úÖ This will send a GraphQL query to Payload and show the Pages.

üñ•Ô∏è Summary:

What	Where
Apollo Client setup	src/apollo/client.js
Wrap Gatsby page	Using <ApolloProvider client={client}>
Fetch Pages	Using useQuery(GET_PAGES)
See Pages in Gatsby	Title and Slug from Payload CMS
‚ö° After setup
Run Payload CMS:

bash
Copy
Edit
npm run dev
Run Gatsby:

bash
Copy
Edit
npm run develop
Open Gatsby: http://localhost:8000

See Pages loaded from Payload!

üìã Final Folder Structure
bash
Copy
Edit
/src
  /apollo
    client.js
  /components
    Pages.js
  /pages
    index.js

‚úÖ At this point:
Payload CMS ‚Üí supplies data

Gatsby + Apollo ‚Üí fetches + displays data


üéØ Goal:
‚úÖ You have Pages in Payload CMS (example:

/about

/contact

/services)

‚úÖ Gatsby fetches all the slugs during build
‚úÖ Gatsby auto-creates pages like /about, /contact, etc.

üõ† Steps:
1. Create a template file
Create a file:
‚û°Ô∏è src/templates/page.js

This file is used to render each Payload page.

javascript
Copy
Edit
import React from 'react'
import { gql, useQuery } from '@apollo/client'

const GET_PAGE_BY_SLUG = gql`
  query Page($slug: String) {
    Pages(where: { slug: { equals: $slug } }) {
      docs {
        id
        title
        slug
        layout {
          ... on ContentBlock {
            blockType
            content
          }
        }
      }
    }
  }
`

export default function PageTemplate({ pageContext }) {
  const { slug } = pageContext
  const { loading, error, data } = useQuery(GET_PAGE_BY_SLUG, {
    variables: { slug },
  })

  if (loading) return <p>Loading...</p>
  if (error) return <p>Error: {error.message}</p>

  const page = data?.Pages?.docs[0]

  if (!page) return <p>Page not found</p>

  return (
    <div>
      <h1>{page.title}</h1>
      {/* Render the content block */}
      {page.layout?.map((block, index) => {
        if (block.blockType === 'content') {
          return (
            <div key={index}>
              <div dangerouslySetInnerHTML={{ __html: block.content }} />
            </div>
          )
        }
        return null
      })}
    </div>
  )
}
‚úÖ This template gets the slug from pageContext and queries Payload dynamically!

2. Edit gatsby-node.js to create dynamic pages
‚û°Ô∏è Inside gatsby-node.js (create it if it doesn't exist):

javascript
Copy
Edit
const path = require('path')
const fetch = require('node-fetch') // Native fetch is available in Node18+, else install

exports.createPages = async ({ actions }) => {
  const { createPage } = actions

  // Fetch slugs from Payload GraphQL
  const response = await fetch('http://localhost:3000/api/graphql', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      query: `
        {
          Pages {
            docs {
              slug
            }
          }
        }
      `,
    }),
  })

  const { data } = await response.json()

  const pages = data?.Pages?.docs || []

  pages.forEach((page) => {
    createPage({
      path: `/${page.slug}`,
      component: path.resolve('./src/templates/page.js'),
      context: {
        slug: page.slug,
      },
    })
  })
}
‚úÖ This runs during Gatsby build,
‚úÖ It calls Payload's GraphQL API, gets all slugs,
‚úÖ And creates pages automatically!

3. Rebuild your Gatsby site!
bash
Copy
Edit
npm run develop
‚úÖ You will now get pages like:

http://localhost:8000/about

http://localhost:8000/contact

http://localhost:8000/services




